package Java8;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;

public class CompletableFuturePractice {

	public static void main(String[] args) {
		CompletableFuture<String> comp = calculateAsynce();
		
		try {
			String result = comp.get();
			System.out.println(result);
			System.out.println(Thread.currentThread().getName());
		} catch (InterruptedException | ExecutionException e) {
			e.printStackTrace();
		}
	}
	private static CompletableFuture<String> calculateAsynce() {
		CompletableFuture<String> completableFuture = new CompletableFuture<>();
		
		List<String> list = new ArrayList<>();
		
		list.add("KK");
		list.add("PK");
		list.add("SK");
		
		Executors.newCachedThreadPool().submit(()->{
			try {
				Thread.sleep(20);
				String joinStr = String.join(",", list);
				completableFuture.complete(joinStr);
			} catch (InterruptedException e) {
				
				e.printStackTrace();
			}
			
		});
		return completableFuture;
	}
}

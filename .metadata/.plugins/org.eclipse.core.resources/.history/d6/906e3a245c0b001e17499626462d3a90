package com.reactivework.cityexercise.cityservicespackage;

import java.beans.Statement;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Struct;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.reactivework.cityexercise.citycustomexceptionpackage.CityCustomException;
import com.reactivework.cityexercise.citymodelclasspackage.City;

import io.r2dbc.spi.Connection;
import reactor.core.publisher.Mono;

public class CRUDOperationWithR2DBC {
	
	private static Logger log = LoggerFactory.getLogger(CRUDOperationWithR2DBC.class);
	
	public void Create() throws CityCustomException  {
		R2DBC_Connection conn = new  R2DBC_Connection();
		Mono<Connection> connectionMono = Mono.from(conn.getConnection().create());
		String createSql = 
				"CREATE TABLE CityExercise (" + 
						"id INT PRIMARY KEY,"+
						"Name VARCHAR(50),"+
						"CountryCode VARCHAR(50),"+
						"City VARCHAR(50)," +
						"Population BIGINT)";
		
		connectionMono.flatMapMany(connection -> connection.createStatement(createSql).execute()).blockLast();
	}
	public void Insert(List<City> data) throws CityCustomException  {
		R2DBC_Connection conn = new  R2DBC_Connection();
		Mono<Connection> connectionMono = Mono.from(conn.getConnection().create());
		java.sql.Connection connection = new java.sql.Connection() {
			
			@Override
			public <T> T unwrap(Class<T> iface) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public boolean isWrapperFor(Class<?> iface) throws SQLException {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setTransactionIsolation(int level) throws SQLException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setSchema(String schema) throws SQLException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public Savepoint setSavepoint(String name) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public Savepoint setSavepoint() throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public void setReadOnly(boolean readOnly) throws SQLException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setHoldability(int holdability) throws SQLException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setClientInfo(String name, String value) throws SQLClientInfoException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setClientInfo(Properties properties) throws SQLClientInfoException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setCatalog(String catalog) throws SQLException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setAutoCommit(boolean autoCommit) throws SQLException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void rollback(Savepoint savepoint) throws SQLException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void rollback() throws SQLException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void releaseSavepoint(Savepoint savepoint) throws SQLException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
					int resultSetHoldability) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
					throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public PreparedStatement prepareStatement(String sql) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
					int resultSetHoldability) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public CallableStatement prepareCall(String sql) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public String nativeSQL(String sql) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public boolean isValid(int timeout) throws SQLException {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public boolean isReadOnly() throws SQLException {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public boolean isClosed() throws SQLException {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public SQLWarning getWarnings() throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public Map<String, Class<?>> getTypeMap() throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public int getTransactionIsolation() throws SQLException {
				// TODO Auto-generated method stub
				return 0;
			}
			
			@Override
			public String getSchema() throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public int getNetworkTimeout() throws SQLException {
				// TODO Auto-generated method stub
				return 0;
			}
			
			@Override
			public DatabaseMetaData getMetaData() throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public int getHoldability() throws SQLException {
				// TODO Auto-generated method stub
				return 0;
			}
			
			@Override
			public String getClientInfo(String name) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public Properties getClientInfo() throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public String getCatalog() throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public boolean getAutoCommit() throws SQLException {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public java.sql.Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
					throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public java.sql.Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public java.sql.Statement createStatement() throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public SQLXML createSQLXML() throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public NClob createNClob() throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public Clob createClob() throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public Blob createBlob() throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public void commit() throws SQLException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void close() throws SQLException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void clearWarnings() throws SQLException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void abort(Executor executor) throws SQLException {
				// TODO Auto-generated method stub
				
			}
		};
		Statement statement =
		
			StringBuffer values= new StringBuffer();
		for(City city : data) {
			values.append("("+ city.getId() +" ,\""+ city.getName() +"\" , \" "+ city.getCouCode() +"\" , "+ city.getCity() +"\" , "+ city.getPopulation() +"),");
		}
		log.info(""+values);
		String insertSql = 
				"INSERT INTO CityExercise(id, Name, CountryCode, city, Population)"+
								"VALUES"+ values;	
		connectionMono.flatMapMany(connection -> connection.createStatement(insertSql).execute()).blockLast();
	}
	
	public void Update() throws CityCustomException {
		R2DBC_Connection conn = new  R2DBC_Connection();
		Mono<Connection> connectionMono = Mono.from(conn.getConnection().create());
		String updateSql = 
				" Update CityExercise set Name = 'update' where id =1;";

		connectionMono.flatMapMany(connection -> connection.createStatement(updateSql).execute()).blockLast();
	}
	public void Delete() throws CityCustomException {

		R2DBC_Connection conn = new  R2DBC_Connection();
		Mono<Connection> connectionMono = Mono.from(conn.getConnection().create());

		String updateSql = 
				" Delete from CityExercise where id =1;";

		connectionMono.flatMapMany(connection -> connection.createStatement(updateSql).execute()).blockLast();
	}
	public void Read() throws CityCustomException  {
		R2DBC_Connection conn = new  R2DBC_Connection();
		Mono<Connection> connectionMono = Mono.from(conn.getConnection().create());
		connectionMono.flatMapMany(connection -> connection.createStatement("select * from Employee2my").execute())
		.flatMap(result -> result.map((row, rowMetadata) -> {
			return "ID: " + row.get("id") + ", Name: " + row.get("Name")  + ", CountryCode: " + row.get("CountryCode") +
					", City: " + row.get("City") +", Population: " + row.get("population");
		})).doOnNext(log::info).blockLast();
	}
}

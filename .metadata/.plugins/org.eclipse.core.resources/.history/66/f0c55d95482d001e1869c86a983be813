package com.reactivework.cityexercise.services;

import java.util.List;
import java.util.stream.Collectors;

import com.reactivework.cityexercise.model.City;
import com.reactivework.cityexercise.util.CityCsvReader;
import com.reactiveworks.cityexercise.exception.CityCustomException;

import jakarta.jws.WebMethod;
import jakarta.jws.WebService;

@WebService
public class CityServicesImpl implements CityServices {

	private List<City> list;
	public CityServicesImpl() throws CityCustomException {
		CityCsvReader csv = new CityCsvReader();
		list = csv.getCityList();
	}
	@WebMethod
	public City getCityNameById(int id) throws CityCustomException {
		
		List<City> searchId = list.stream().filter(i->i.getId()== id).collect(Collectors.toList());
		if(!searchId.isEmpty())
		return searchId.get(0);
		throw new CityCustomException("Id Not Found Exception",new CityCustomException());
	}
	@WebMethod
	public List<City> getListOfCityNameByCode(String cCode) throws CityCustomException {
		List<City> cityNameByCouCode = list.stream().filter(i-> i.getCouCode().equals(cCode)).collect(Collectors.toList());
		if(cityNameByCouCode.isEmpty()) {
			throw new CityCustomException("Country Code is Invalid",new CityCustomException());
		}	 
		return cityNameByCouCode;
	}
	@WebMethod
	public City getCityOfMaxPopulation() 
	{ 
		 return list.stream().max((a,b)->a.getPopulation()>b.getPopulation()?+1: -1).get();
	}
	@WebMethod
	public City getCityOfMinPopulation() 
	{
		return list.stream().min((a,b)->a.getPopulation()>b.getPopulation()?+1: -1).get();
	}
}	


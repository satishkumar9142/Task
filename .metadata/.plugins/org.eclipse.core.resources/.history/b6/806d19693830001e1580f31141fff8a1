package com.reactiveworks.product.individualproduct;
/*
 * 
	a.) Create a class Product with following fields Product(ProductId:String,ProductName:String,ProductType:String,Price:Double,Warranty:Int,ManufecturedDt:Date)
 *
 */
import java.time.LocalDate;


import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Date;
import java.util.Map;
import com.reactiveworks.product.exception.ProductException;

import jakarta.persistence.DiscriminatorColumn;
import jakarta.persistence.DiscriminatorType;
import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Inheritance;
import jakarta.persistence.InheritanceType;

@Entity
@Inheritance(strategy=InheritanceType.SINGLE_TABLE)
@DiscriminatorValue("PRODUCT")
@DiscriminatorColumn(name="PRODUCT_TYPE", discriminatorType=DiscriminatorType.STRING)
public class Product {
	@Id
	String productId;
	@Id
	String productName;
	@Id
	String productType;
	@Id
	double price; 
	@Id
	int warranty; 
	@Id
	Date manufecturedDt;

	public String getProductType() {
		return productType;
	}
	public String getProductId() {
		return productId;
	}
	public String getProductName() {
		return productName;
	}
	public double getPrice() {
		return price;
	}
	public int getWarranty() {
		return warranty;
	}
	
	
	public Date getManufecturedDt() {
		return manufecturedDt;
	}
	public void setManufecturedDt(Date manufecturedDt) {
		this.manufecturedDt = manufecturedDt;
	}
	public void setProductId(String productId) {
		this.productId = productId;
	}
	public void setProductName(String productName) {
		this.productName = productName;
	}
	public void setProductType(String productType) {
		this.productType = productType;
	}
	public void setPrice(double price) {
		this.price = price;
	}
	public void setWarranty(int warranty) {
		this.warranty = warranty;
	}

	
	
	public void buildProduct(Map<String,String> map) throws ProductException{
		this.productId = map.get("ProductId");
		this.productName = map.get("ProductName");
		this.productType = map.get("ProductType");
		try {
			this.price = Double.parseDouble(map.get("Price"));
			this.warranty = Integer.parseInt(map.get("Warranty"));
		}
		catch(NumberFormatException e) {
			throw new ProductException("Data Type is not in proper for which dataType we want to convert");
		}
		long date;
		try {
		    date = map.get("ManufecturedDt");	
		}
		catch(DateTimeParseException e) {
			throw new ProductException("Date Formate Is not Correct");
		}
		this.manufecturedDt = date;	
	}
}
